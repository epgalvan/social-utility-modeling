Data Generation Process
*********

.. article-info::
    :avatar: dnl_plastic.png
    :avatar-link: https://www.decisionneurosciencelab.com/
    :author: Elijah Galvan
    :date: September 1, 2023
    :read-time: 10 min read
    :class-container: sd-p-2 sd-outline-muted sd-rounded-1

Goals During this Stage
================

We want to mathematically model the data generation process - in other words, develop an equation that predicts what all people will decide in each trial.

.. Warning::

    Mathematically modeling the data generation process is the most difficult step in the computational modeling process: there is no objectively correct way to go about it. 
    With that said, I believe that this is achievable in a timely manner when given the correct goals and a useful framework. 

.. dropdown:: Framework for Developing an Equation

    The central theoretical question we want our Equation to answer is this:

    What :bdg-success:`meaningful psychological differences between people` determine how much :bdg-warning:`Utility` they derive from their :bdg-danger:`decisions`, 
    given the situation as defined by the :bdg-primary:`independent variables` and :bdg-primary:`constants`.

    1. For each hypothesis, think of the central appetitive or aversive motive that would lead people to make such :bdg-danger:`decisions`
    2. Think about *how* the :bdg-danger:`decisions` people make enable them to act on their environment (:bdg-primary:`independent variables` and :bdg-primary:`constants` ) to avoid or obtain whatever is motivating them according to each hypothesis
    3. Now think about *how* other :bdg-danger:`decisions` that people could make would prevent them from avoiding or obtaining whatever is motivating them according to each hypothesis.
    4. Taking a step back now, identify the dimensions which are implied by the :bdg-success:`meaningful psychological differences between people` you have identified in your hypotheses - what way are these people quantitatively different?

    By now, you should have an idea of how :bdg-primary:`independent variables`, :bdg-primary:`constants` , and :bdg-danger:`decisions` relate to the motives identified by each hypothesis, so now let's get into actually designing the equation. 

    5. For each motive you have identified, create a function which takes :bdg-danger:`decisions` as an input, where :bdg-primary:`independent variables` and :bdg-primary:`constants` are already defined, and outputs a value which scales with motive as a function of :bdg-danger:`decisions`.

    If you plot the output (let's call this our :bdg-secondary:`construct values` ) against :bdg-danger:`decisions` for a few trials (with a few example combinations of :bdg-primary:`independent variables` ) and it makes sense to you, then great job! 
    Otherwise, think about how you can fix it so that it will make sense. 

    .. Note::
        It helps to have all terms (i.e. :bdg-secondary:`construct value` and :bdg-success:`free parameters` ) range between 0 and 1.

    6. Now, multiply each :bdg-secondary:`construct value` by the relevant :bdg-success:`free parameters`.
    7. Combine these terms and set them equal to :bdg-warning:`Utility` - now you have a working draft of an Equation!

Tutorial
================

.. dropdown:: For each hypothesis, think of the central appetitive or aversive motive that would lead people to make such :bdg-danger:`decisions`.

    1. Greed - a desire to obtain money (or an aversion to losing money)
    2. Inequity Aversion - an aversion to creating inequity (or a desire to achieve equity)    
    3. Guilt Aversion - an aversion to violating others' expectations (or a desire to meet others' expectation)

.. dropdown:: Think about *how* the :bdg-danger:`decisions` people make enable them to act on their environment ( :bdg-primary:`independent variables` and :bdg-primary:`constants` ) to avoid or obtain whatever is motivating them according to each hypothesis.

    1. Greed - people keep and take as much money as they can
    2. Inequity Aversion - people give back enough money so that them and their partner have an equal amount     
    3. Guilt Aversion - people give back enough money so that their partners' expectations are met

.. dropdown:: Now think about *how* other :bdg-danger:`decisions` that people could make would prevent them from avoiding or obtaining whatever is motivating them according to each hypothesis.

    1. Greed - not keeping or taking as much money does not maximize one's payoff
    2. Inequity Aversion - not giving enough money back so that them and their partner have an equal amount
    3. Guilt Aversion - not giving their partner what they expect

.. dropdown:: Taking a step back now, identify the dimensions which are implied by the :bdg-success:`meaningful psychological differences between people` you have identified in your hypotheses - what way are these people quantitatively different?

    1. Greedy people act in their own material self-interest while both Inequity Averse and Guilt Averse people act in others' self-interest
    2. Inequity Averse people act in others' material self-interest based on a desire to maintain equality - to be objectively fair
    3. Guilt Averse people are motivated to act in others' material self-interest based on a desire to meet expectations - to be perceived as being fair

    Dimensions:

    * :bdg-success:`D1` - ranges from prosociality (low) to greed (high)
    * :bdg-success:`D2` - ranges from perceived (low) to objective (high)

    .. figure:: dimension_hmtg.png
        :figwidth: 100%
        :align: center

.. dropdown:: For each motive you have identified, create a function which takes :bdg-danger:`decisions` as an input, where :bdg-primary:`independent variables` and :bdg-primary:`constants` are already defined, and outputs a value which scales with motive as a function of :bdg-danger:`decisions`.

    .. dropdown:: Greed

        .. tab-set::

            .. tab-item:: Plain English

                The extent to which one has behaved greedily can be expressed as the proportion of how much they decided to keep for themselves out of how much they *could* have kept for themselves (i.e the extent to which they maximized their payout). 
                In the Trust Game, the maximum amount that the Trustee can keep for themselves is what they are :bdg-primary:`Given` , namely: :bdg-primary-line:`Investment` × :bdg-primary-line:`Multiplier`. 
                And, therefore, what they :bdg-danger:`Keep` is (:bdg-primary-line:`Investment` × :bdg-primary-line:`Multiplier` ) - :bdg-danger:`Returned`

                Thus, the extent to which one has maximized their payout is:
                
                :bdg-secondary:`Payout Maximization` = :bdg-danger:`Keep`/(:bdg-primary-line:`Investment` × :bdg-primary-line:`Multiplier` )

            .. tab-item:: R

                ::

                    payout_maximization = function(investment, multiplier, returned){
                        return(((investment * multiplier) - returned)/(investment * multiplier))
                    }

            .. tab-item:: MatLab

                ::

                    function value = payout_maximization(investment, multiplier, returned)
                        value = ((investment * multiplier) - returned) / (investment * multiplier);
                    end


            .. tab-item:: Python

                :: 
                    
                    def payout_maximization(investment, multiplier, returned):
                        return ((investment * multiplier) - returned) / (investment * multiplier)

    .. dropdown:: Inequity Aversion

        .. tab-set::

            .. tab-item:: Plain English


            .. tab-item:: R

                :: 

            .. tab-item:: MatLab

                :: 

            .. tab-item:: Python

                :: 
                
    .. dropdown:: Guilt Aversion

        .. tab-set::

            .. tab-item:: Plain English


            .. tab-item:: R

                :: 

            .. tab-item:: MatLab

                :: 

            .. tab-item:: Python

                :: 

.. dropdown:: Now, multiply each :bdg-secondary:`construct value` by the relevant :bdg-success:`free parameters`.

    1. Greed - :bdg-secondary:`Payout Maximization` × :bdg-success:`D1`  
    2. Inequity Aversion - :bdg-secondary:`Equity Achieved` × (1-:bdg-success:`D1` ) × (:bdg-success:`D2` )
    3. Guilt Aversion - :bdg-secondary:`Expectation Meeting` × (1-:bdg-success:`D1` ) × (1-:bdg-success:`D2` )

    .. Note::

        Why do we use (1-:bdg-success:`D1` ) and (1-:bdg-success:`D2` )? 
        
        Each dimension we have created is mathematically arbitrary: the fact that greed is endorsed at high values of :bdg-success:`D1` is a consequence of our choice. 
        It could just as reasonably be that greed is endorsed at low values of :bdg-success:`D1`. 
        
        The dimension we created dichtomize one preference against another: thus, we can simply take the inverse


.. dropdown:: Combine these terms and set them equal to :bdg-warning:`Utility` - now you have a working draft of an Equation!

    